1-> Arrays always come up with a condition that they need continous memory location to be properly implemented.

1.1-> To insert or delete an element from an array we need to shift the remaining elements to fill up the vacant space(in case of deletion) or we need to shift the elements to the right to make space for another one(in case of insertion).

2-> In Linked list elements can be presented at any memory location all we need to do is to maintain the record of their memory address.

2.1-> In Arrays the traversal of elements is easy while it is much more diffuclt in case of linked list on the other hand in linked list the insertion and deletion of elements is way more easy than that of array.

2.1.1-> In array elements can be accessed in constant time,irresepective of their position.

2.1.2-> In linked list we need one extra space for each node as to store the address of next node.Hence we need space to store element as well as to store the address of next node.

2.2-> Linked list can be implemented in C using structures. The structure hence created is of self refrencing type i.e, it refers to itself.

struct Node{
    int data;
    struct Node* next;    //Self refrencing structure
};

2.3-> The time complexity in traversalof linked list in O(n).

2.4->Time complexity while entering elements in the linked list.(Time complexity refers to the time taken by the compiler to perform a specific task)

2.4.1->While inserting an element in the beginning of a linked list the time complexity is O(1). As it does not depends on the number of element present in the linked list before .

2.4.1.1-> The process to insert an element in the beginning of linked list is as follows:-
Step1: Create a node 
Step2: Point the node at the head of the linked list 
Step3: Declare the new node as head

{
struct Node* ptr = (struct Node*) malloc(sizeof(struct Node));
ptr->next = head;
head = ptr;
return head;
}

2.4.2->While inserting in-between any linked list the time complexity to do this is O(n). As we first need to traverse upto that element andonly after that we can insert the element there.

2.4.2.1-> The process to insert an element in-between any linked list is as follows:-
Step1: Create a pointer and make it traverse upto the required node at whivh we have to insert the new node
Step2: Make a new node and point it as required

{
    struct Node* ptr = (struct Node*) malloc(sizeof(struct Node));
    ptr->next = p->next; // p is the pointer variable which we had created earlier for traversal

    //In the above step hum n jo hamara pointer variable p tha uske next part ko jo pahale directly next node ko point kar raha tha ab hum n usse new node se point karwa diya h aur ab agle step m  hum p ke next ko ptr pe point karenge 

    p->next = ptr; 
}

2.4.3->While inserting an element in the end of the list ,first we have to traverse the whole list till ptr->next = NULL As it becomes NULL we can insert the new node there.

2.4.3.1-> The time complexity of this process is O(n) as we need to traverse the whole list first before entering a node there. 